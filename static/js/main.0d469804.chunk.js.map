{"version":3,"sources":["img/nft_image.gif","components/isMobile.ts","components/Info/index.ts","components/Info/Info.tsx","components/Countdown/index.ts","components/Countdown/CountDown.tsx","components/InactiveMintButton/index.ts","components/InactiveMintButton/InactiveMintButton.tsx","components/styled.tsx","components/ProgressBar/index.ts","components/ProgressBar/ProgressBar.tsx","components/MintButton/MintButton.tsx","components/MintButton/index.ts","constants.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["isMobile","userAgent","navigator","vendor","window","opera","test","MSStream","innerWidth","Info","props","theme","useTheme","mobileMarker","Paper","style","width","display","flexDirection","backgroundColor","palette","primary","light","marginTop","marginBottom","padding","justifyContent","alignItems","Typography","variant","color","fontFamily","fontWeight","textAlign","type","marginLeft","amount","CountDown","days","hours","minutes","seconds","className","elevation","marginRight","contrastText","InactiveMintButton","CTAButton","styled","Button","onClick","alert","MainContainer","div","WalletContainer","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","FullWidthConnectButton","BorderLinearProgress","LinearProgress","ProgressBar","paddingTop","redeemed","available","value","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","state","a","gatekeeper","CircularProgress","goLiveDate","startDate","Date","startWlDate","cluster","process","toString","splTokenName","MintPage","balance","setBalance","setIsMinting","setIsActive","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","message","severity","undefined","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","useWallet","setCandyMachine","rpcUrl","rpcHost","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","divider","Array","join","slice","tokenMint","toNumber","LAMPORTS_PER_SOL","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","mint","getTokenAccountBalance","tokenBalance","uiAmount","error","endSettings","endSettingType","date","toDate","number","getTime","limit","Math","min","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","expireOnUse","Error","hideDuration","startsWith","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","setupState","anchor","Keypair","generate","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","code","indexOf","getBalance","dark","overflowX","height","minHeight","toLocaleString","Container","maxWidth","paddingLeft","paddingRight","paddingBottom","main","innerHeight","Grid","container","spacing","item","xs","md","sm","lg","src","nft_image","alt","borderRadius","boxShadow","onMount","completed","onComplete","renderer","PublicKey","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","require","e","getCandyMachineId","network","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","isWhitelistOnly","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.0d469804.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nft_image.9b23b8a2.gif\";","\n\nconst isMobile = () => {\n    //@ts-ignore\n    const  userAgent = navigator.userAgent || navigator.vendor || window.opera;\n\n\n    if (/android/i.test(userAgent)) {\n        return true;\n    }\n\n    //@ts-ignore\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n        return true;\n    }\n\n    if (window.innerWidth < 530) {\n        return true;\n    }\n\n    return false;\n}\n\nexport default isMobile","import {Info} from \"./Info\"\n\nexport default Info","import React from 'react';\nimport {Paper, Typography, useTheme} from \"@mui/material\";\nimport isMobile from \"../isMobile\";\n\n\n\ninterface Price {\n    type: string,\n    amount: string | number\n}\n\nexport const Info = (props: Price) => {\n    const theme = useTheme()\n    const mobileMarker = isMobile()\n\n\n    return (\n                <Paper style={{\n                    width: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    backgroundColor: theme.palette.primary.light,\n                    marginTop: mobileMarker ? '0.5rem': 0,\n                    marginBottom: mobileMarker ? '0.5rem': 0,\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        padding: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    }}>\n                        <Typography display=\"inline\" variant=\"h6\" style={{\n                            color: '#00BFFF',\n                            fontFamily: 'Papyrus',\n                            fontWeight: 'Bold',\n                            textAlign: 'center',\n\n                        }}>\n                            {props.type}\n                            <Typography display=\"inline\" variant=\"h6\" style={{\n                                color: '#00BFFF',\n                                fontFamily: 'Papyrus',\n                                fontWeight: 'Bold',\n                                textAlign: 'center',\n                                marginLeft: 5,\n                            }}>\n                                {props.amount}\n                            </Typography>\n                        </Typography>\n\n                    </div>\n                </Paper>\n\n    );\n};\n","import {CountDown} from \"./CountDown\"\n\nexport default CountDown","import React from \"react\";\nimport {Typography, Paper, useTheme} from \"@mui/material\";\nimport \"./count_down.css\"\nimport isMobile from \"../isMobile\";\n\nexport const CountDown = ({days, hours, minutes, seconds}: any) => {\n    const theme = useTheme()\n    const mobileMarker = isMobile()\n\n    return (\n        <div className=\"countDown-container\" style={{\n            marginTop: mobileMarker ? '1rem' : 0,\n            marginBottom: mobileMarker ? '1rem' : 0\n        }}>\n            <Paper elevation={0} className=\"item-container\"\n                   style={{\n                       backgroundColor: theme.palette.primary.light,\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem',\n                       textAlign: 'center'\n                   }}>\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\n                    {days < 10 ? `0${days}` : days}\n                </Typography>\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\n                }}>days</Typography>\n            </Paper>\n            <Paper elevation={0} className=\"item-container\"\n                   style={{\n                       backgroundColor: theme.palette.primary.light,\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem'\n                   }}>\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\n                    {hours < 10 ? `0${hours}` : hours}\n                </Typography>\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\n                }}>hrs</Typography>\n            </Paper>\n            <Paper elevation={0} className=\"item-container\"\n                   style={{\n                       backgroundColor: theme.palette.primary.light,\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem'\n                   }}>\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\n                    {minutes < 10 ? `0${minutes}` : minutes}\n                </Typography>\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\n                }}> mins </Typography>\n            </Paper>\n            <Paper elevation={0} className=\"item-container\" style={{backgroundColor: theme.palette.primary.light,}}>\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}\n                >\n                    {seconds < 10 ? `0${seconds}` : seconds}\n                </Typography>\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\n                }}> secs</Typography>\n            </Paper>\n        </div>\n    );\n};\n","import {InactiveMintButton} from \"./InactiveMintButton\";\n\nexport default InactiveMintButton","import React from 'react';\nimport styled from \"styled-components\";\nimport {Button} from \"@mui/material\";\nimport isMobile from \"../isMobile\";\n\nexport const InactiveMintButton = () => {\n    const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: #616A6B !important;\n  min-width: 120px !important;\n  width: 100%;\n  font-size: 1em !important;\n  color: #fff !important;\n  font-family: Main !important;\n  font-weight: bold !important;\n`;\n\n    const alertMessage = \"Mint is not live yet!\"\n\n    return (\n            <CTAButton variant=\"contained\" onClick={() => alert(alertMessage)}>\n                Mint\n            </CTAButton>\n\n    );\n};\n","import styled from \"styled-components\";\nimport {LinearProgress, Paper} from \"@mui/material\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\n\n\nexport const MainContainer = styled.div`\n      display: flex;\n      flex-direction: column;\n      margin-top: 20px;\n      margin-bottom: 20px;\n      text-align: center;\n      justify-content: center;\n    `;\n\nexport const WalletContainer = styled.div`\n  position: absolute; \n  top: 0.5rem;\n  right: 0.5rem;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const WalletAmount = styled.div`\n  color: #fff;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--light-background-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nexport const Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nexport const FullWidthConnectButton = styled(WalletMultiButton)`\n  border-radius: 10px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n  width: 100%;\n`;\n\n\nexport const BorderLinearProgress = styled(LinearProgress)`\n  margin: 15px;\n  height: 10px !important;\n  border-radius: 30px;\n  color: var(--title-text-color);\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color: #fff !important;\n  \n .MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n  \n  .MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\n\n","import {ProgressBar} from \"./ProgressBar\";\n\nexport default ProgressBar","import React from 'react';\nimport {BorderLinearProgress} from \"../styled\";\nimport {Paper, useTheme, Typography} from \"@mui/material\";\nimport isMobile from \"../isMobile\";\n\ninterface Progress {\n    redeemed: number,\n    available: number\n}\n\nexport const ProgressBar = (props: Progress) => {\n    const theme = useTheme()\n    const mobileMarker = isMobile()\n\n    return (\n        <Paper style={{\n            backgroundColor: theme.palette.primary.light,\n            paddingTop: 5,\n            marginTop: mobileMarker ? '0.5rem' : 0,\n            marginBottom: mobileMarker ? '1rem' : 0,\n        }}>\n            <Typography display=\"inline\" variant=\"h5\" style={{\n                color: '#2ECCFA',\n                fontFamily: 'Papyrus',\n                fontWeight: 'Bold',\n                textAlign: 'center',\n\n            }}>\n                Minted SIM Cubes:\n            <Typography display=\"inline\" variant=\"h5\" style={{\n                color: '#2ECCFA',\n                fontFamily: 'Papyrus',\n                fontWeight: 'Bold',\n                textAlign: 'center',\n                marginLeft: 5\n            }}>\n                {props.redeemed} / {props.available}</Typography>\n            </Typography>\n            <BorderLinearProgress\n                style={{\n                    width: '95%',\n                    marginRight: 0,\n                    marginLeft: '2%',\n                }}\n                variant=\"determinate\"\n                value={100 - ((props.available - props.redeemed) * 100 / props.available)}/>\n        </Paper>\n    );\n};\n\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport {Button, CircularProgress} from '@mui/material';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachineAccount} from '../../candy-machine';\n\n\nconst CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  width: 100%;\n  font-size: 1em !important;\n  font-family: Main !important;\n  font-weight: bold !important;\n  color: #fff !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine?: CandyMachineAccount;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","import {MintButton} from \"./MintButton\";\n\nexport default MintButton","\n\nexport const startDate = new Date(\"19 May 2022 17:00:00 GMT\")\nexport const startWlDate = new Date(\"19 May 2022 16:00:00 GMT\")\n\nexport const mintPrice = '2.00'\nexport const supply = 50","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Alert, Paper, Grid, useTheme, Container, Typography} from \"@mui/material\";\n\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport {\n    Commitment,\n    Connection,\n    PublicKey,\n    Transaction,\n    LAMPORTS_PER_SOL\n} from \"@solana/web3.js\";\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\nimport {useWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\n\nimport {AlertState, getAtaForMint, toDate} from './utils';\nimport {\n    awaitTransactionSignatureConfirmation,\n    CANDY_MACHINE_PROGRAM,\n    CandyMachineAccount,\n    createAccountsForMint,\n    getCandyMachineState,\n    getCollectionPDA,\n    mintOneToken,\n    SetupState,\n} from \"./candy-machine\";\n\n\n\nimport nft_image from \"./img/nft_image.gif\"\n\n\nimport Info from \"./components/Info\";\nimport CountDown from \"./components/Countdown\";\nimport InactiveMintButton from \"./components/InactiveMintButton\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport MintButton from './components/MintButton';\n\nimport './Home.css'\nimport {MainContainer,\n    ConnectButton,\n    FullWidthConnectButton,\n    Wallet,\n    WalletAmount,\n    WalletContainer,\n} from \"./components/styled\";\n\nimport isMobile from \"./components/isMobile\"\nimport {startDate, startWlDate, mintPrice, supply} from \"./constants\";\n\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\n\nexport interface HomeProps {\n    candyMachineId?: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n    network: WalletAdapterNetwork;\n}\n\nexport const MintPage = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\n    const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n    const wallet = useWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n\n    const rpcUrl = props.rpcHost;\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const anchorWallet = useMemo(() => {\n        if (\n            !wallet ||\n            !wallet.publicKey ||\n            !wallet.signAllTransactions ||\n            !wallet.signTransaction\n        ) {\n            return;\n        }\n\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction,\n        } as anchor.Wallet;\n    }, [wallet]);\n\n    const refreshCandyMachineState = useCallback(\n        async (commitment: Commitment = 'confirmed') => {\n            if (!anchorWallet) {\n                return;\n            }\n\n            const connection = new Connection(props.rpcHost, commitment);\n\n            if (props.candyMachineId) {\n                try {\n                    const cndy = await getCandyMachineState(\n                        anchorWallet,\n                        props.candyMachineId,\n                        connection,\n                    );\n\n                    setCandyMachine(cndy);\n                    setItemsAvailable(cndy.state.itemsAvailable);\n                    setItemsRemaining(cndy.state.itemsRemaining);\n                    setItemsRedeemed(cndy.state.itemsRedeemed);\n\n                    var divider = 1;\n                    if (decimals) {\n                        divider = +('1' + new Array(decimals).join('0').slice() + '0');\n                    }\n\n                    // detect if using spl-token to mint\n                    if (cndy.state.tokenMint) {\n                        setPayWithSplToken(true);\n                        // Customize your SPL-TOKEN Label HERE\n                        // TODO: get spl-token metadata name\n                        setPriceLabel(splTokenName);\n                        setPrice(cndy.state.price.toNumber() / divider);\n                        setWhitelistPrice(cndy.state.price.toNumber() / divider);\n                    } else {\n                        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                    }\n\n\n                    // fetch whitelist token balance\n                    if (cndy.state.whitelistMintSettings) {\n                        setWhitelistEnabled(true);\n                        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                        setIsPresale(cndy.state.whitelistMintSettings.presale);\n                        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                            if (cndy.state.tokenMint) {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                            } else {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                            }\n                        }\n\n                        let balance = 0;\n                        try {\n                            const tokenBalance =\n                                await props.connection.getTokenAccountBalance(\n                                    (\n                                        await getAtaForMint(\n                                            cndy.state.whitelistMintSettings.mint,\n                                            anchorWallet.publicKey,\n                                        )\n                                    )[0],\n                                );\n\n                            balance = tokenBalance?.value?.uiAmount || 0;\n                        } catch (e) {\n                            console.error(e);\n                            balance = 0;\n                        }\n                        if (commitment !== \"processed\") {\n                            setWhitelistTokenBalance(balance);\n                        }\n                        setIsActive(isPresale && !isEnded && balance > 0);\n\n                    } else {\n                        setWhitelistEnabled(false);\n                    }\n\n                    // end the mint when date is reached\n                    if (cndy?.state.endSettings?.endSettingType.date) {\n                        setEndDate(toDate(cndy.state.endSettings.number));\n                        if (\n                            cndy.state.endSettings.number.toNumber() <\n                            new Date().getTime() / 1000\n                        ) {\n                            setIsEnded(true);\n                            setIsActive(false);\n                        }\n                    }\n                    // end the mint when amount is reached\n                    if (cndy?.state.endSettings?.endSettingType.amount) {\n                        let limit = Math.min(\n                            cndy.state.endSettings.number.toNumber(),\n                            cndy.state.itemsAvailable,\n                        );\n                        setItemsAvailable(limit);\n                        if (cndy.state.itemsRedeemed < limit) {\n                            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                        } else {\n                            setItemsRemaining(0);\n                            cndy.state.isSoldOut = true;\n                            setIsEnded(true);\n                        }\n                    } else {\n                        setItemsRemaining(cndy.state.itemsRemaining);\n                    }\n\n                    if (cndy.state.isSoldOut) {\n                        setIsActive(false);\n                    }\n\n                    const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n                    const collectionPDAAccount = await connection.getAccountInfo(\n                        collectionPDA,\n                    );\n\n                    const txnEstimate =\n                        892 +\n                        (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n                        (cndy.state.tokenMint ? 66 : 0) +\n                        (cndy.state.whitelistMintSettings ? 34 : 0) +\n                        (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n                        (cndy.state.gatekeeper ? 33 : 0) +\n                        (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n                    setNeedTxnSplit(txnEstimate > 1230);\n                } catch (e) {\n                    if (e instanceof Error) {\n                        if (\n                            e.message === `Account does not exist ${props.candyMachineId}`\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        } else if (\n                            e.message.startsWith('failed to get info about account')\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        }\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: `${e}`,\n                            severity: 'error',\n                            hideDuration: null,\n                        });\n                    }\n                    console.log(e);\n                }\n            } else {\n                setAlertState({\n                    open: true,\n                    message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n                    severity: 'error',\n                    hideDuration: null,\n                });\n            }\n        },\n        [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection],\n    );\n\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setSetupTxn(undefined);\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        setIsMinting(false);\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async (\n        beforeTransactions: Transaction[] = [],\n        afterTransactions: Transaction[] = [],\n    ) => {\n        try {\n            if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n                setIsMinting(true);\n                let setupMint: SetupState | undefined;\n                if (needTxnSplit && setupTxn === undefined) {\n                    setAlertState({\n                        open: true,\n                        message: 'Please validate account setup transaction',\n                        severity: 'info',\n                    });\n                    setupMint = await createAccountsForMint(\n                        candyMachine,\n                        wallet.publicKey,\n                    );\n                    let status: any = {err: true};\n                    if (setupMint.transaction) {\n                        status = await awaitTransactionSignatureConfirmation(\n                            setupMint.transaction,\n                            props.txTimeout,\n                            props.connection,\n                            true,\n                        );\n                    }\n                    if (status && !status.err) {\n                        setSetupTxn(setupMint);\n                        setAlertState({\n                            open: true,\n                            message:\n                                'Setup transaction succeeded! You can now validate mint transaction',\n                            severity: 'info',\n                        });\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: 'Mint failed! Please try again!',\n                            severity: 'error',\n                        });\n                        return;\n                    }\n                }\n\n                const setupState = setupMint ?? setupTxn;\n                const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n                let mintResult = await mintOneToken(\n                    candyMachine,\n                    wallet.publicKey,\n                    mint,\n                    beforeTransactions,\n                    afterTransactions,\n                    setupState,\n                );\n\n                let status: any = {err: true};\n                let metadataStatus = null;\n                if (mintResult) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintResult.mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        true,\n                    );\n\n                    metadataStatus =\n                        await candyMachine.program.provider.connection.getAccountInfo(\n                            mintResult.metadataKey,\n                            'processed',\n                        );\n                    console.log('Metadata status: ', !!metadataStatus);\n                }\n\n                if (status && !status.err && metadataStatus) {\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                    refreshCandyMachineState('processed');\n                } else if (status && !status.err) {\n                    setAlertState({\n                        open: true,\n                        message:\n                            'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n                        severity: 'error',\n                        hideDuration: 8000,\n                    });\n                    refreshCandyMachineState();\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                    refreshCandyMachineState();\n                }\n            }\n        } catch (error: any) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (anchorWallet) {\n                const balance = await props.connection.getBalance(anchorWallet!.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [anchorWallet, props.connection]);\n\n    useEffect(() => {\n        refreshCandyMachineState();\n    }, [\n        anchorWallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale,\n        refreshCandyMachineState\n    ]);\n\n\n\n    const mobileMarker = isMobile()\n    const theme = useTheme()\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return <CountDown days={days} hours={hours} minutes={minutes} seconds={seconds}/>\n    };\n\n\n\n\n    return (\n        <main style={{\n            backgroundColor: theme.palette.primary.dark,\n            width: window.innerWidth > 530 ? '100%' : window.innerWidth * 0.99,\n            overflowX: 'hidden',\n            height: '100%',\n            minHeight: '100vh'\n        }}>\n            <MainContainer style={{\n                marginTop: 50,\n            }}>\n\n\n                <WalletContainer>\n                    <Wallet>\n                        {\n                           wallet ?\n                                   <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                                   <ConnectButton>Connect Wallet</ConnectButton>\n                        }\n\n                    </Wallet>\n                </WalletContainer>\n\n\n\n\n                {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                <Typography variant={mobileMarker ? \"h4\" : 'h3'} style={{\n                    color: '#fff',\n                    fontFamily: 'Main',\n                    fontWeight: 'bold',\n                }}>You are whitelisted</Typography>}\n\n                <Container maxWidth=\"md\">\n                    <Paper style={{\n                        marginTop: mobileMarker ? '4rem' : '3rem',\n                        paddingTop: '1rem',\n                        paddingLeft: '1rem',\n                        paddingRight: 0,\n                        paddingBottom: '1rem',\n                        backgroundColor: theme.palette.primary.main,\n                        width: '90%',\n                        marginLeft: mobileMarker ? '2.5%' : '5%',\n                        minHeight: mobileMarker ? window.innerHeight * 0.75 : 'auto'\n                    }}>\n                        <Grid container spacing={2} style={{\n                            width: '100%',\n\n                        }}>\n                            <Grid item xs={12} md={6} sm={6} lg={6}>\n                                <img src={nft_image} alt=\"loading...\"\n                                     style={{width: '100%', borderRadius: 10,\n                                         boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\"}}/>\n                                         <p><b> ~ MUST BE A PALM DAO MEMBER ~\nSOLANA INSTANT MINT IS AN AUTOMATED SOLANA NFT CHECKOUT ENGINE THAT GENERATES PASSIVE INCOME FOR MEMBERS</b></p>\n<p><b> SIM Renovation Testing:</b> 8 Okay Bears, 5 Dead Rejects, 6 Mining Labs, 777 Junkies, 11 Baked Bots, Planetarians & More\n<br></br>\n<br></br>\n<b>Previous SIM Success:</b> 100+ Enviros, 20+ Lofts, 15+ Zillaz\n<br></br>\n<br></br>\n<b>2 SOLANA / 50 SPOTS / 30 DAYS</b>\n</p>\n                            </Grid>\n\n                            <Grid item xs={12} md={6} sm={6} lg={6} style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                justifyContent: 'space-between',\n                                paddingBottom: mobileMarker ? 0 : '0.3rem',\n                                height: mobileMarker ? '100%' : 'auto'\n                            }}>\n                                <Typography variant=\"h4\" style={{\n                                    color: '#013ADF',\n                                    fontFamily: 'Papyrus',\n                                    fontWeight: 'Bold',\n                                }}>\n                                   ⚔ Palm DAO SIM Cube July ⚔\n                                </Typography>\n\n                                        <Info type=\"Price\" amount={price ? isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel) : mintPrice}/>\n                                <Info type=\"Supply\" amount={itemsAvailable ? itemsAvailable : supply}/>\n\n                                        {wallet && isActive &&\n                                        (whitelistEnabled && (whitelistTokenBalance > 0) ? new Date() > startWlDate : new Date() > startDate) ?\n                                            <ProgressBar available={itemsAvailable} redeemed={itemsRedeemed} /> : <Countdown\n                                            date={ whitelistEnabled && (whitelistTokenBalance > 0) ? startWlDate : startDate}\n                                            onMount={({completed}) => completed && setIsActive(!isEnded)}\n                                            onComplete={() => {\n                                                setIsActive(!isEnded);\n                                            }}\n                                            renderer={renderGoLiveDateCounter}\n                                        />\n                                        }\n\n                                            {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) || (whitelistEnabled && (whitelistTokenBalance > 0) ? new Date() < startWlDate : new Date() < startDate) ? <InactiveMintButton /> : (\n                                                !wallet ? (\n                                                    <FullWidthConnectButton>Connect Wallet</FullWidthConnectButton>\n                                                ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                                    candyMachine?.state.gatekeeper &&\n                                                    wallet.publicKey &&\n                                                    wallet.signTransaction ? (\n                                                        <GatewayProvider\n                                                            wallet={{\n                                                                publicKey:\n                                                                    wallet.publicKey ||\n                                                                    new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                                //@ts-ignore\n                                                                signTransaction: wallet.signTransaction,\n                                                            }}\n                                                            clusterUrl={rpcUrl}\n                                                            options={{autoShowModal: false}}\n                                                        >\n                                                            <MintButton\n                                                                candyMachine={candyMachine}\n                                                                isMinting={isMinting}\n                                                                isActive={isActive}\n                                                                isEnded={isEnded}\n                                                                isSoldOut={isSoldOut}\n                                                                onMint={onMint}\n                                                            />\n                                                        </GatewayProvider>\n                                                    ) : (\n                                                        <MintButton\n                                                            candyMachine={candyMachine}\n                                                            isMinting={isMinting}\n                                                            isActive={isActive}\n                                                            isEnded={isEnded}\n                                                            isSoldOut={isSoldOut}\n                                                            onMint={onMint}\n                                                        />\n                                                    ) :\n                                                    <h1>Mint is private.</h1>\n                                            )}\n\n                                </Grid>\n                            </Grid>\n                    </Paper>\n                </Container>\n\n            </MainContainer>\n\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\n\n","import { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport { DEFAULT_TIMEOUT } from './connection';\nimport {MintPage} from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n    try {\n        const candyMachineId = new anchor.web3.PublicKey(\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\n        );\n\n        return candyMachineId;\n    } catch (e) {\n        console.log('Failed to construct CandyMachineId', e);\n        return undefined;\n    }\n};\n\nconst candyMachineId = getCandyMachineId();\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n    // Custom RPC endpoint.\n    const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect={true}>\n                <WalletModalProvider>\n                    <MintPage\n                        candyMachineId={candyMachineId}\n                        connection={connection}\n                        txTimeout={DEFAULT_TIMEOUT}\n                        rpcHost={rpcHost}\n                        network={network}\n                    />\n                </WalletModalProvider>\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from \"@mui/material\";\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            light: '#2e3d4d',\n            main: '#81BEF7',\n            dark: '#338FE5',\n            contrastText: '#00BFFF'\n        },\n\n    },\n});\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n   <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n    mint: anchor.web3.PublicKey,\n    buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n      CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n    wallet: anchor.web3.PublicKey,\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [\n        wallet.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n        gatekeeperNetwork.toBuffer(),\n      ],\n      CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n    txid: anchor.web3.TransactionSignature,\n    timeout: number,\n    connection: anchor.web3.Connection,\n    queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n    anchorWallet: anchor.Wallet,\n    candyMachineId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n      await anchor.web3.PublicKey.findProgramAddress(\n          [\n            Buffer.from('metadata'),\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n            mint.toBuffer(),\n            Buffer.from('edition'),\n          ],\n          TOKEN_METADATA_PROGRAM_ID,\n      )\n  )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n      await anchor.web3.PublicKey.findProgramAddress(\n          [\n            Buffer.from('metadata'),\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n            mint.toBuffer(),\n          ],\n          TOKEN_METADATA_PROGRAM_ID,\n      )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n    candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n      CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n    candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n      CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n    mint: anchor.web3.PublicKey,\n    newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n      await anchor.web3.PublicKey.findProgramAddress(\n          [\n            Buffer.from('metadata'),\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n            mint.toBuffer(),\n            Buffer.from('collection_authority'),\n            newAuthority.toBuffer(),\n          ],\n          TOKEN_METADATA_PROGRAM_ID,\n      )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n          ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        payer,\n        payer,\n        mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        payer,\n        [],\n        1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n        await sendTransactions(\n            candyMachine.program.provider.connection,\n            candyMachine.program.provider.wallet,\n            [instructions],\n            [signers],\n            SequenceType.StopOnFailure,\n            'singleGossip',\n            () => {},\n            () => false,\n            undefined,\n            [],\n            [],\n        )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n    setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n      : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n        ...[\n          anchor.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: MintLayout.span,\n            lamports:\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                    MintLayout.span,\n                ),\n            programId: TOKEN_PROGRAM_ID,\n          }),\n          Token.createInitMintInstruction(\n              TOKEN_PROGRAM_ID,\n              mint.publicKey,\n              0,\n              payer,\n              payer,\n          ),\n          createAssociatedTokenAccountInstruction(\n              userTokenAccountAddress,\n              payer,\n              payer,\n              mint.publicKey,\n          ),\n          Token.createMintToInstruction(\n              TOKEN_PROGRAM_ID,\n              mint.publicKey,\n              userTokenAccountAddress,\n              payer,\n              [],\n              1,\n          ),\n        ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n          await getNetworkToken(\n              payer,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n            await getNetworkExpire(\n                candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: payer,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: payer,\n          updateAuthority: payer,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n            remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n      await candyMachine.program.provider.connection.getAccountInfo(\n          collectionPDA,\n      );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n          (await candyMachine.program.account.collectionPda.fetch(\n              collectionPDA,\n          )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n          collectionMint,\n          collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n            await candyMachine.program.instruction.setCollectionDuringMint({\n              accounts: {\n                candyMachine: candyMachineAddress,\n                metadata: metadataAddress,\n                payer: payer,\n                collectionPda: collectionPDA,\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n                collectionMint,\n                collectionMetadata,\n                collectionMasterEdition,\n                authority: candyMachine.state.authority,\n                collectionAuthorityRecord,\n              },\n            }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n        await sendTransactions(\n            candyMachine.program.provider.connection,\n            candyMachine.program.provider.wallet,\n            instructionsMatrix,\n            signersMatrix,\n            SequenceType.StopOnFailure,\n            'singleGossip',\n            () => {},\n            () => false,\n            undefined,\n            beforeTransactions,\n            afterTransactions,\n        )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n      partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n            successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[] | Transaction,\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n          // fee payed by the wallet owner\n          wallet.publicKey,\n          ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n                                              signedTransaction,\n                                              connection,\n                                              timeout = DEFAULT_TIMEOUT,\n                                            }: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}